name: dbt CI (DuckDB)

on:
  pull_request:
    branches: ["main"]

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      # dbt finner profiles.yml i repoet
      DBT_PROFILES_DIR: .
      # Én DuckDB-fil per PR/commit (isolert miljø)
      DBT_DUCKDB_PATH: warehouse/pr_${{ github.event.pull_request.number }}__${{ github.sha }}.duckdb

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dbt + deps
        run: |
          python -m pip install --upgrade pip
          pip install -r dbt-requirements.txt

      - name: Ensure folders
        run: mkdir -p warehouse external state

      # (Valgfritt) Hent siste prod.duckdb for lesing/defer
      - name: Download latest prod.duckdb artifact (if any)
        shell: bash
        run: |
          set -euo pipefail
          curl -s -H "Authorization: Bearer ${{ github.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts?per_page=100" \
            -o artifacts.json
          prod_id=$(jq -r '.artifacts
            | map(select(.name=="duckdb-prod-db" and .expired==false))
            | sort_by(.created_at) | last | .id // empty' artifacts.json)
          if [[ -n "$prod_id" ]]; then
            curl -sL -H "Authorization: Bearer ${{ github.token }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$prod_id/zip" \
              -o prod.zip
            unzip -q prod.zip -d _prod || true
            f=$(ls -1 _prod/**.duckdb 2>/dev/null | head -n1 || true)
            if [[ -n "${f:-}" ]]; then
              mv "$f" warehouse/prod.duckdb
            fi
          fi

      # Last ned forrige manifest for Slim CI og sett DBT_STATE til mappen som inneholder det
      - name: Download latest manifest (if any) + set DBT_STATE
        shell: bash
        run: |
          set -euo pipefail
          rm -f ./manifest.json  # unngå gamle/innsjekkede filer
          curl -s -H "Authorization: Bearer ${{ github.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts?per_page=100" \
            -o artifacts.json
          man_id=$(jq -r '.artifacts
            | map(select(.name=="dbt-manifest" and .expired==false))
            | sort_by(.created_at) | last | .id // empty' artifacts.json)
          if [[ -n "$man_id" ]]; then
            curl -sL -H "Authorization: Bearer ${{ github.token }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$man_id/zip" \
              -o manifest.zip
            mkdir -p state
            unzip -q manifest.zip -d state || true
            FOUND="$(find state -type f -name manifest.json -print -quit || true)"
            if [[ -n "${FOUND:-}" ]] && jq -e . "$FOUND" >/dev/null 2>&1; then
              echo "DBT_STATE=$(dirname "$FOUND")" >> "$GITHUB_ENV"
              echo "Using DBT_STATE=$(dirname "$FOUND")"
            else
              echo "No valid manifest.json found. Will run full build."
            fi
          else
            echo "No manifest artifact found. Will run full build."
          fi

      - name: Generate schema ID (per PR)
        run: echo "SCHEMA_ID=pr_${{ github.event.pull_request.number }}__${{ github.sha }}" >> $GITHUB_ENV

      # (Valgfritt) Lint SQL før bygg – fjern dette steget hvis du ikke bruker SQLFluff
      - name: Lint SQL with SQLFluff (optional)
        run: |
          pip install sqlfluff sqlfluff-templater-dbt
          sqlfluff lint models/ --format github-annotation-native || true

      - name: dbt deps & seed
        run: |
          dbt deps
          dbt seed --target pr

      - name: Run dbt build (Slim CI if state present)
        run: |
          if [[ -n "${DBT_STATE:-}" && -f "${DBT_STATE}/manifest.json" ]]; then
            dbt build -s 'state:modified+' --defer --state "$DBT_STATE" --target pr --vars "schema_id: $SCHEMA_ID"
          else
            dbt build --target pr --vars "schema_id: $SCHEMA_ID"
          fi

      - name: Upload target/ for debugging
        uses: actions/upload-artifact@v4
        with:
          name: dbt-target
          path: target
          retention-days: 7

      - name: Upload PR DuckDB file
        uses: actions/upload-artifact@v4
        with:
          name: duckdb-pr-db
          path: ${{ env.DBT_DUCKDB_PATH }}
          retention-days: 7

      - name: Cleanup temp files
        run: rm -rf state/ _prod/ prod.zip manifest.zip artifacts.json || true
